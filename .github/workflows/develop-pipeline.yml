# نام ورک‌فلو مخصوص برنچ توسعه
name: Develop Proxy Pipeline

on:
  # این ورک‌فلو فقط زمانی اجرا می‌شود که تغییری به برنچ develop ارسال شود
  push:
    branches:
      - develop
  # امکان اجرای دستی را هم فراهم می‌کند
  workflow_dispatch:

# تضمین می‌کند که فقط یک نمونه از این ربات در هر لحظه در حال اجرا باشد
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  #----------------------------------------------------
  # مرحله ۱: آماده‌سازی و بسته‌بندی کارها
  #----------------------------------------------------
  prepare-work:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: pip install pyyaml httpx requests

      - name: Run Data Acquisition and Batching
        env:
          GH_PAT: "${{ secrets.GH_PAT }}"
        run: |
          python manage_sources.py
          python merge_configs.py
          python prepare_batches.py
      
      - name: Upload Batch Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: work-batches-develop
          path: ci_batches/

  #-----------------------------------------------------------------
  # مرحله ۲: اجرای تست‌های موازی (لایه اول: زنده بودن)
  #-----------------------------------------------------------------
  run-liveness-tests:
    needs: prepare-work
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        batch_id: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: pip install pyyaml requests geoip2

      - name: Download Batch Artifacts
        uses: actions/download-artifact@v4
        with:
          name: work-batches-develop
          path: ci_batches/
      
      - name: Run Liveness Check on Assigned Batch
        run: |
          BATCH_FILE="ci_batches/batch_${{ matrix.batch_id }}.txt"
          CANDIDATES_FILE="live_candidates_${{ matrix.batch_id }}.txt"
          python check_liveness.py --input $BATCH_FILE --output $CANDIDATES_FILE
      
      - name: Upload Live Candidates Artifact
        uses: actions/upload-artifact@v4
        with:
          name: live-candidates-develop-${{ matrix.batch_id }}
          path: live_candidates_${{ matrix.batch_id }}.txt

  #------------------------------------------------------------------
  # مرحله ۳: اجرای تست‌های موازی (لایه دوم: تست سرعت)
  #------------------------------------------------------------------
  run-speed-tests:
    needs: run-liveness-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        batch_id: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Dependencies
        run: pip install requests geoip2 pyyaml httpx

      # --- بخش اصلاح شده ---
      - name: Download Prerequisite Tools (Xray, Hysteria2 & GeoIP)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # دانلود کردن دیتابیس GeoIP
          wget -q https://github.com/P3TERX/GeoLite.mmdb/raw/download/GeoLite2-City.mmdb -O GeoLite2-City.mmdb
          
          # دانلود کردن آخرین نسخه Xray
          wget -q -O xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
          unzip -o -q xray.zip xray
          chmod +x xray

          # دانلود کلاینت Hysteria2
          wget -q https://github.com/apernet/hysteria/releases/latest/download/hysteria-linux-amd64 -O hysteria
          chmod +x hysteria
          
          echo "Xray, Hysteria2, and GeoIP are ready."
      
      - name: Download Live Candidates Artifact
        uses: actions/download-artifact@v4
        with:
          name: live-candidates-develop-${{ matrix.batch_id }}
      
      - name: Run Speed Test on Live Candidates
        run: |
          CANDIDATES_FILE="live_candidates_${{ matrix.batch_id }}.txt"
          DB_FILE="results_${{ matrix.batch_id }}.db"
          python test_worker.py --input $CANDIDATES_FILE --db-file $DB_FILE

      - name: Upload Result Artifact
        uses: actions/upload-artifact@v4
        with:
          name: db-result-develop-${{ matrix.batch_id }}
          path: results_${{ matrix.batch_id }}.db
  
  #-------------------------------------------------------------
  # مرحله ۴: ادغام نتایج، ساخت خروجی‌ها و انتشار
  #-------------------------------------------------------------
  merge-and-publish:
    runs-on: ubuntu-latest
    needs: run-speed-tests
    if: success() || failure()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install pyyaml jdatetime pytz

      # --- بخش اصلاح شده ---
      - name: Download All Result Artifacts
        uses: actions/download-artifact@v4
        with:
          path: db_results/
          pattern: db-result-develop-* # این خط به تنهایی کافیست

      - name: Merge, Generate, and Finalize
        run: |
          python merge_databases.py --input-dir db_results/ --output-db aggregator_data.db
          python create_rotating_sub.py
          python generate_readme.py
      
      - name: Commit and Push Final Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Develop Pipeline)"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "feat(auto-dev): update proxy configurations and README"
            git pull --rebase
            git push
          else
            echo "No changes to commit."
          fi
