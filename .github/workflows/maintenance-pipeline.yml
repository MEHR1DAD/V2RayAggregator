name: Database Maintenance (Parallel)

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # --- مرحله ۱: آماده‌سازی بچ‌ها برای کارگران ---
  dispatch-maintenance-jobs:
    name: Dispatch Maintenance Jobs
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Create Maintenance Batches
        run: python prepare_maintenance_batches.py
      - uses: actions/upload-artifact@v4
        with:
          name: maintenance-batches
          path: ci_batches/

  # --- مرحله ۲: تست مجدد موازی (استفاده مجدد از همان منطق تست اصلی) ---
  re-run-speed-tests:
    needs: dispatch-maintenance-jobs
    name: Re-Test Speed (Batch ${{ matrix.batch_id }})
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        batch_id: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install requests geoip2 pyyaml httpx
      - name: Download Prerequisite Tools
        run: |
          wget -q https://github.com/P3TERX/GeoLite.mmdb/raw/download/GeoLite2-City.mmdb -O GeoLite2-City.mmdb
          wget -q -O xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
          unzip -o -q xray.zip xray && chmod +x xray
          wget -q https://github.com/apernet/hysteria/releases/latest/download/hysteria-linux-amd64 -O hysteria && chmod +x hysteria
      - uses: actions/download-artifact@v4
        with:
          name: maintenance-batches
          path: ci_batches/
      - name: Run Speed Test on Assigned Batch
        run: |
          CONFIG_FILE="ci_batches/batch_${{ matrix.batch_id }}.txt"
          DB_FILE="results_maint_${{ matrix.batch_id }}.db"
          if [ -f "$CONFIG_FILE" ]; then
            python test_worker.py --input "$CONFIG_FILE" --db-file "$DB_FILE"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: db-maint-result-${{ matrix.batch_id }}
          path: ${{ env.DB_FILE }}
        env:
          DB_FILE: results_maint_${{ matrix.batch_id }}.db

  # --- مرحله ۳: نهایی‌سازی و انتشار ---
  finalize-and-publish:
    name: Finalize, Publish, and Cleanup
    runs-on: ubuntu-latest
    needs: re-run-speed-tests
    if: always()
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install pyyaml jdatetime pytz pycountry
      - uses: actions/download-artifact@v4
        with:
          path: db_maint_results/
          pattern: db-maint-result-*
      - name: Finalize Database and Generate Files
        run: |
          python finalize_maintenance.py --input-dir db_maint_results/ --output-db aggregator_data.db
          python create_rotating_sub.py
          python generate_readme.py
      - name: Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (DB Maintenance)"
          git add aggregator_data.db summary.json subscription/
          if ! git diff --staged --quiet; then
            git commit -m "chore(db): maintain and clean up database"
            git push --force
          else
            echo "No changes to the database to commit."
          fi
