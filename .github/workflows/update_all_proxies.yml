name: Update All Proxy Subscriptions (Matrix)

on:
  schedule:
    - cron: '0 */3 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  prepare-work:
    # ... (this job remains unchanged) ...
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install pyyaml httpx requests
      - name: Run Data Acquisition and Batching
        env: { GH_PAT: "${{ secrets.GH_PAT }}" }
        run: |
          python manage_sources.py
          python merge_configs.py
          python prepare_batches.py
      - uses: actions/upload-artifact@v4
        with: { name: work-batches, path: ci_batches/ }

  run-tests:
    needs: prepare-work
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        batch_id: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install requests geoip2 pyyaml httpx
      - name: Download Cached Dependencies (Xray, GeoIP, Assets)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Download GeoIP.mmdb
          gh release download deps/geoip-latest --repo ${{ github.repository }} --pattern '*.mmdb' --clobber
          
          # Download Xray Assets
          gh release download deps/xray-assets-latest --repo ${{ github.repository }}
          
          # Download Xray Binary
          LATEST_XRAY_TAG=$(gh release list --repo ${{ github.repository }} --limit 50 --json tagName --jq '.[] | select(.tagName | startswith("deps/xray-")) | .tagName' | head -n 1)
          if [ -z "$LATEST_XRAY_TAG" ]; then exit 1; fi
          gh release download "$LATEST_XRAY_TAG" --repo ${{ github.repository }} --pattern 'xray' --clobber
          chmod +x xray
          
          echo "All dependencies downloaded:"
          ls -l xray *.dat *.mmdb

      - uses: actions/download-artifact@v4
        with: { name: work-batches, path: ci_batches/ }
      - name: Run Tests on Assigned Batch
        run: |
          BATCH_FILE="ci_batches/batch_${{ matrix.batch_id }}.txt"
          CANDIDATES_FILE="candidates_${{ matrix.batch_id }}.txt"
          DB_FILE="results_${{ matrix.batch_id }}.db"
          python check_liveness.py --input $BATCH_FILE --output $CANDIDATES_FILE
          python exp_country.py --input $CANDIDATES_FILE --db-file $DB_FILE
      - uses: actions/upload-artifact@v4
        with:
          name: db-result-${{ matrix.batch_id }}
          path: results_${{ matrix.batch_id }}.db

  merge-results:
    # ... (this job remains unchanged) ...
    runs-on: ubuntu-latest
    needs: run-tests
    if: success()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install pyyaml jdatetime pytz
      - uses: actions/download-artifact@v4
        with: { path: db_results/ }
      - name: Merge, Generate, and Finalize
        run: |
          python merge_databases.py --input-dir db_results/ --output-db aggregator_data.db
          python create_rotating_sub.py
          python generate_readme.py
      - name: Commit and Push Final Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Matrix)"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "chore: data update via matrix workflow"
            git pull --rebase
            git push
          else
            echo "No changes to commit."
          fi
