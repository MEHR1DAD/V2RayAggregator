name: Update All Proxy Subscriptions

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  schedule:
    # Runs every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:

jobs:
  update-all:
    runs-on: ubuntu-latest
    # Add a safety timeout, slightly longer than the internal script timeout
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests geoip2 jdatetime pytz pyyaml httpx
          
      - name: Download Cached Dependencies
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Downloading cached GeoIP database..."
          gh release download deps/geoip-latest --repo ${{ github.repository }} --pattern '*.mmdb' --clobber
          
          echo "Downloading cached Xray-core..."
          LATEST_XRAY_TAG=$(gh release list --repo ${{ github.repository }} --limit 50 --json tagName --jq '.[] | select(.tagName | startswith("deps/xray-")) | .tagName' | head -n 1)
          
          if [ -z "$LATEST_XRAY_TAG" ]; then
            echo "::error::No cached Xray release found. Please run the 'Update External Dependencies' workflow first."
            exit 1
          fi
          
          echo "Using cached Xray version: $LATEST_XRAY_TAG"
          gh release download "$LATEST_XRAY_TAG" --repo ${{ github.repository }} --pattern 'xray' --clobber
          chmod +x xray
          
          echo "Dependencies downloaded successfully:"
          ls -l xray GeoLite2-City.mmdb

      - name: Run Main Pipeline
        run: |
          echo "--- Running Main Data Pipeline ---"
          python manage_sources.py
          python merge_configs.py
          python check_liveness.py
          python create_rotating_sub.py
          python generate_readme.py
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}

      - name: Commit and push all changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git rm --cached -r aggregator_data.db protocol_configs || true
          git add .
          if git diff --staged --quiet; then
            echo "No changes detected. Skipping commit."
          else
            git commit -m "chore: data update"
            git push
          fi
          
      - name: Upload Artifacts to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          files: |
            summary.json
            aggregator_data.db
          body: "Latest subscription files and data. This release is updated automatically."
          make_latest: true